
@using KLC.Models
@model PatientViewModel
@{
    ViewData["Title"] = "Statistics";
}
<link rel="stylesheet" href="~/css/NEWS.css" asp-append-version="true" />
<link rel="stylesheet" href="~/css/slider.css" asp-append-version="true" />
<div class="text-center">
    @*Historik och graf*@
	<div class="content-wrapper">
		<div class="title-section">
			<div class="patient-wrapper">
				<div class="white-on-blue">
					<p>Historik för patient @(Model.Patient.Id):</p>
				</div>
				<div>
					<p>@Model.Patient.Personnummer</p>
				</div>
			</div>
			<h1>Historik</h1>	
            <div class="options-container">
                <label for="toggle">Visa graf</label>
				<label class="switch">
                <input type="checkbox" name="toggle" id="toggle-chart" />
                <span class="slider round"></span>
            </label>
            
            </div>
	    </div>
        <div class="chart-container hide">
            <canvas class="chart top" id="simple-chart"></canvas>
        </div>
		<div class="history">
		<table>
		<tr>
			<th>Tidpunkt</th>
			<th>Andningsfrekvens</th>
			<th>Syremättnad</th>
			<th>Tillförd syrgas</th>
			<th>Systoliskt blodtryck</th>
			<th>Pulsfrekvens</th>
			<th>Medvetandegrad</th>
			<th>Temperatur</th>
		</tr>
		@*Visa tabell med värden istället för news poäng
			använder index för att visa estetiskt värde snarare än det uppmätta newsvärdet.
			3 = 0 på news skalan, +värdet på mätningen som går från -3 till +3
		*@
		@for (var i = 0; i < Model.Matningar.Count(); i++)
		{
					MatningNews2 element = @Model.Matningar[i];
					string empty = "--";

			<tr>
				<td>
					@element.TidForMatning.ToShortDateString()
					@element.TidForMatning.ToShortTimeString()
				</td>
						@if (element.Andningsfrekvens == null)
						{
							<td>@empty</td>
						}
						else
						{
						<td>@Model.Varden.Andningsfrekvens[(3+(int)element.Andningsfrekvens)]</td>
						}
						
				@* if using syremättnad2, dumt sätt att skilja på vilken som valdes är att inputs för sm2
					går från 7 till 13: 7-10 = -3
				*@
						@if(element.SyreMattnad == null)
						{
							<td>@empty</td>
						}
						else
						{
							@if(element.SyreMattnad >= 7){
							<td>@Model.Varden.SyreMattnad2[3+(int)element.SyreMattnad-10]<p>syrgas 2</p></td>
							}
							else{
							<td>@Model.Varden.SyreMattnad1[3+(int)element.SyreMattnad]</td>
							}
						}

						@if(element.TillfordSyrgas == null)
						{
							<td>@empty</td>
						}
						else
						{
							<td>@Model.Varden.TillfordSyrgas[3+(int)element.TillfordSyrgas]</td>
						}

						@if(element.SystolisktBlodtryck == null)
						{
							<td>@empty</td>
						}
						else
						{
							<td>@Model.Varden.SystolisktBlodtryck[3+(int)element.SystolisktBlodtryck]</td>
						}

						@if(element.Pulsfrekvens == null)
						{
							<td>@empty</td>
						}
						else
						{
							<td>@Model.Varden.Pulsfrekvens[3+(int)element.Pulsfrekvens]</td>
						}

						@if(element.Medvetandegrad == null)
						{
							<td>@empty</td>
						}
						else
						{
							<td>@Model.Varden.Medvetandegrad[3+(int)element.Medvetandegrad]</td>
						}

						@if(element.Temperatur == null)
						{
							<td>@empty</td>
						}
						else
						{
							<td>@Model.Varden.Temperatur[3+(int)element.Temperatur]</td>
						}
			</tr>
		}
		</table>
		
		</div>
   </div>

    <div class="controls">
	    <a  class="newsbutton submit" asp-controller="Patient" asp-action="Index">Ny mätning</a>
        <div class="separator"></div>
		<a  class="newsbutton" asp-controller="Patient" asp-action="Results">Visa åtgärd</a>
		<div class="separator"></div>

       <button class="newsbutton delete" type="submit" onclick="openPopup()" id="popupBtn">Radera senaste mätning</button>
		
<div class="overlay"></div>

<div class="popup" id="popup">
			<button class="closepopupwindow" onclick="closeFirstPopup()">X</button>

	<h2>Är du säker på att du vill radera senaste mätning?</h2>
	<form id="deleteLatest" name="deleteLatest" asp-controller="Patient" method="post" asp-action="DeleteLatestFromPatient"></form>
			<button type="submit" class="buttonNo" form="deleteLatest" onclick="closePopup()">Radera</button>
			<button onclick=closeFirstPopup()>Avbryt</button>
</div>

		<div class="popup" id="popup2">
   <button class="closepopupwindow" onclick="closePopup()">X</button>
   <h2>Är du säker på att du vill radera all tidigare historik?</h2>
   <form id="deleteAll" name="deleteAll" asp-controller="Patient" method="post" asp-action="DeleteAllFromPatient"></form>
   <button type="submit" class="buttonNo" form="deleteAll" onclick="closePopup()">Radera</button>
   <button onclick="closePopup()">Avbryt</button>
</div>
<button class="newsbutton delete" type="submit" id="popup2Btn">Radera all historik</button>

		
	</div>
	
	@*<a  class="newsbutton" asp-controller="Patient" asp-action="Statistics">Radera senaste mätning</a>
	<a class="newsbutton delete" asp-controller="Patient" asp-action="Statistics">Radera all historik</a> *@
    
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.3.0/dist/chart.umd.js"></script>
    <script>
        //hämta html element
		const canvas = document.querySelector("#simple-chart");

		canvas.width = 500;
		canvas.height = 400;

		//hämta canvas kontext
		const ctx = canvas.getContext("2d");

		const ActionCalc = (sum, threeflag) => {
		  if (sum >= 7) {
			return 4;
		  } else if (sum==6 || sum==5) {
			return 3;
		  } else if (threeflag == true) {
			return 2;
		  } else if (sum <= 4 && sum >= 1) {
			return 1;
		  } else {
			return 0;
		  }
		};

		const NewsCalcToArray = (array) => {
		//store our results
		let results = [];

		array.forEach((item) => {
        //inner result
        let result = { sum: 0, action: 0, time: 0 };
        let threeFlag = false;

        //keys that we are interested in
        const keys = [
            "andningsfrekvens",
            "medvetandegrad",
            "pulsfrekvens",
            "syreMattnad",
            "tillfordSyrgas",
            "systolisktBlodtryck",
            "temperatur",
            "tidForMatning"
        ];

        //make a map of the keys
        item = keys.map((key) => item[key]);

        //foreach value in keys map, except last value (time)
        for (let i = 0; i < item.length - 1; i++) {
            let value = item[i];
            if (value != null) {
                //if syrgas2
                if (value >= 7) {
                    value = value - 10;
                    console.log(value);
                }
                //add to sum
                result.sum += Math.abs(value);
                //if any value is three flip flag
                if (Math.abs(value) == 3) {
                    threeFlag = true;
                }
            }
        };

        result.action = ActionCalc(result.sum, threeFlag);
 
		let input = item[item.length - 1];
		let date = "";
		let time = "";
		date = input.split("T")[0];
		date = date.substring(2);
		time = input.split("T")[1];
		time = time.split(":")[0]+":"+time.split(":")[1];

		result.time = date+" "+time;

        //let date = new Date(Date.parse(item[item.length - 1]));
        //result.time = date.toUTCString().split(",")[0] + " " + date.getHours() + ":" + date.getMinutes();
        
        results.push(result);
		});
		return results;
		};

		//importera data från api
		const mChart = async (id) => {
		const response = await fetch("https://informatik13.ei.hv.se/KLCAPI/api/MatningNews2/GetAllFromPatient/" + id);
		const srcdata = await response.json();
		let mdata = NewsCalcToArray(srcdata);

		//värden som kommer återanvändas
		let mBorderwidth = 8;
		let mHoverBorderwidth = 30;
		let mTension = 0.2;

		//skapa chart
		  new Chart(ctx, {
		  type: "line",
		  data: {
			  //använder counts funktionen ovan
			  labels: mdata.map((value) => value.time),
			datasets: [
			  {
				label: "NEWS",
				//hämtar alla värden ur data arrayen
				data: mdata.map((value) => value.action),
				borderColor: "#488f31",
				backgroundColor: "#488f31",
				borderWidth: mBorderwidth,
				//hur mycket bezier curve man vill ha
				tension: mTension,
				hoverBackgroundColor: "#ffffff",
				pointHoverRadius: mHoverBorderwidth,
			  },
			],
		  },
		  options: {
			scales: {
			  y: {
				min: 0, // Minsta värde
				max: 5, // Högsta värde
				ticks: {
				  stepSize: 1, // steg mellan värden
				  // Sätt de värden vi vill ha på Y-axis
				  callback: function (value, index, values) {
					var labels = [
					  "0",
					  "Totalt 1-4",
					  "3 poäng i ett fält",
					  "Totalt 5-6",
					  "Totalt ≥7",
					];

					return labels[index];
				  },
				},
			  },
			},
		  },
		});
		}
		//här körs chart funktionen
		mChart(@Model.Patient.Id);

        //hämta html element
        const toggle = document.querySelector("#toggle-chart");
        const chart = document.querySelector(".chart-container");
		const table = document.querySelector(".history");

        //toggla mellan vyer
        toggle.addEventListener("input", () => {
           chart.classList.toggle("hide");
		   table.classList.toggle("hide");
        });
    </script>

	@*script för lightboxen*@
  <script>
	// Get the popup and overlay elements
	let popup = document.getElementById("popup");
	let overlay = document.querySelector(".overlay");

	// Get the "Radera senaste mätning" button and add an event listener
	let deleteBtn = document.querySelector(".delete");
	deleteBtn.addEventListener("click", function() {
		openPopup();
	});

	function openPopup() {
		// Show the popup and overlay
		popup.classList.add("openPopup");
		overlay.style.display = "block";
	}

	function closeFirstPopup() {
		// Hide the popup and overlay
		popup.classList.remove("openPopup");
		overlay.style.display = "none";
	}
</script>

	
	<script>
		let popup2Btn = document.getElementById("popup2Btn");
		let popup2 = document.getElementById("popup2");

		popup2Btn.addEventListener("click", function () {
			popup2.classList.add("openPopup");
			overlay.style.display = "block";
		});
		function closePopup() {
			popup2.classList.remove("openPopup");
			overlay.style.display = "none";
		}
		
	</script>

</div>

